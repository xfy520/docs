kind: pipeline
type: docker
name: docs

workspace:
  base: /docs

clone:
  disable: true

volumes:
- name: cache
  host:
    path: /home/ubuntu/data/drone/cache
- name: docker
  host:
    path: /var/run/docker.sock
- name: github
  host:
    path: /home/ubuntu/data/drone/data

steps:
- name: 拉取项目
  image: alpine/git:v2.30.2
  pull: if-not-exists
  environment:
    DRONE_GIT_URL:
      from_secret: drone_git_url
    SSH_KEY:
      from_secret: ssh_key
    SHELL:
      from_secret: shell
  volumes:
    - name: github
      path: /drone/src
  commands:
    - echo $DRONE_GIT_URL
    - mkdir -p /root/.ssh/
    - echo "$$SSH_KEY" > /root/.ssh/id_rsa
    - chmod -R 600 /root/.ssh/id_rsa
    - ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
    - echo $SHELL
    - echo "$$SHELL" > ./shell.sh
    - sh ./shell.sh

- name: 获取缓存数据
  pull: if-not-exists
  image: meltwater/drone-cache:v1
  volumes:
    - name: cache
      path: /tmp/cache
  settings:
    backend: "filesystem"
    restore: true
    cache_key: "v1"
    archive_format: "gzip"
    mount:
      - ./node_modules

- name: 打包
  image: node:16.9-alpine
  pull: if-not-exists
  commands:
    - npm config set registry https://registry.npm.taobao.org/
    - npm config set cache "./node_modules"
    - npm install
    - npm run build
    - ls -a

- name: 更新缓存数据
  pull: if-not-exists
  image: meltwater/drone-cache:v1
  volumes:
    - name: cache
      path: /tmp/cache
  settings:
    backend: "filesystem"
    archive_format: "gzip"
    cache_key: "v1"
    rebuild: true
    mount:
      - ./node_modules

- name: 打包镜像+上传
  image: plugins/docker:linux-amd64
  pull: if-not-exists
  privileged: true
  settings:
    dockerfile: Dockerfile
    repo: image.wssio.com/docs
    registry: image.wssio.com
    auto_tag: true
    username:
      from_secret: docker_username
    password:
      from_secret: docker_password

- name: 部署
  image: docker:20.10.8
  volumes:
  - name: docker
    path: /var/run/docker.sock:ro
  environment:
    DOCKER_USERNAME:
      from_secret: docker_username
    DOCKER_PASSWORD:
      from_secret: docker_password
  commands:
  - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD image.wssio.com
  - docker pull image.wssio.com/docs:latest
  - list=$(docker ps -a| grep docs* | awk '{print $1}')
  - test "$list" = "" && echo "none docs containers running" || docker stop $list
  - docker run -d -v /home/ubuntu/data/nginx/docs:/var/log/nginx -l "traefik.enable=true" -l "traefik.docker.network=proxy" -l "traefik.http.routers.docs.entrypoints=https" -l "traefik.http.routers.docs.rule=Host('doc.wssio.com')" -l "traefik.http.services.docs.loadbalancer.server.port=8081" --network=proxy  --name=docs image.wssio.com/docs:latest

trigger:
  branch:
    - main
  event:
    - push
    - pull_request

---
kind: secret
name: drone_git_url
get:
  path: drone/data/docs
  name: drone_git_url
---
kind: secret
name: ssh_key
get:
  path: drone/data/docs
  name: ssh_key
---
kind: secret
name: docker_username
get:
  path: drone/data/docs
  name: docker_username
---
kind: secret
name: docker_password
get:
  path: drone/data/docs
  name: docker_password
